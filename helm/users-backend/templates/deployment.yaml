apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ .Values.application.name }}
    namespace: {{ .Values.global.applicationNs }}
    labels:
    {{- include "common.labels" . | indent 8 }}
spec:
    replicas: {{ .Values.application.replicaCount }}
    selector:
        matchLabels:
        {{- include "common.labels" . | indent 16 }}
    template:
        metadata:
            labels:
             {{- include "common.labels" . | indent 24 }}
        spec:
            volumes:
                - name: tls
                  secret:
                      secretName: {{ .Values.keycloak.secretName }}
                      items:
                          - key: 'tls.crt'
                            path: tls.crt
            containers:
                - name: {{ .Values.application.name }}
                  image: "{{ .Values.application.imagePrefix }}/{{ .Values.application.name }}:{{ .Values.application.version }}"
                  imagePullPolicy: {{ .Values.application.pullPolicy }}
                  volumeMounts:
                      - mountPath: /home/{{ .Values.application.name }}/app/cert
                        name: tls
                  ports:
                      - name: {{ .Values.application.containerPortName }}
                        containerPort: {{ .Values.application.containerPort }}
                        protocol: TCP
                      - name: {{ .Values.monitoring.portName }}
                        containerPort: {{ .Values.application.metricsPort }}
                        protocol: TCP
                  readinessProbe:
                      {{- toYaml .Values.readinessProbe | nindent 24 }}
                  livenessProbe:
                      {{- toYaml .Values.livenessProbe | nindent 24 }}
                  resources:
                      {{- toYaml .Values.resources | nindent 24 }}
                  envFrom:
                      - configMapRef:
                            name: {{ .Values.application.name}}-config-map
                      - configMapRef:
                            name: {{ .Values.global.usersDbConfigMap }}
                      - secretRef:
                            name: {{ .Values.application.name}}-secret
                  env:
                      - name: DB_USERNAME
                        valueFrom:
                            secretKeyRef:
                                name: {{ .Values.global.usersDbSecret }}
                                key: username
                      - name: DB_PASSWORD
                        valueFrom:
                            secretKeyRef:
                                name: {{ .Values.global.usersDbSecret }}
                                key: password
